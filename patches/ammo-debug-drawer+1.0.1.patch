diff --git a/node_modules/ammo-debug-drawer/AmmoDebugDrawer.js b/node_modules/ammo-debug-drawer/AmmoDebugDrawer.js
index 1c128fe..60875e7 100644
--- a/node_modules/ammo-debug-drawer/AmmoDebugDrawer.js
+++ b/node_modules/ammo-debug-drawer/AmmoDebugDrawer.js
@@ -1,8 +1,14 @@
-/* global Ammo */
+"use strict";
 
-export const DefaultBufferSize = 3 * 1000000;
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.DefaultBufferSize = exports.AmmoDebugDrawer = exports.AmmoDebugConstants = void 0;
 
-export const AmmoDebugConstants = {
+/* global Ammo */
+const DefaultBufferSize = 3 * 1000000;
+exports.DefaultBufferSize = DefaultBufferSize;
+const AmmoDebugConstants = {
   NoDebug: 0,
   DrawWireframe: 1,
   DrawAabb: 2,
@@ -15,20 +21,24 @@ export const AmmoDebugConstants = {
   EnableSatComparison: 256,
   DisableBulletLCP: 512,
   EnableCCD: 1024,
-  DrawConstraints: 1 << 11, //2048
-  DrawConstraintLimits: 1 << 12, //4096
-  FastWireframe: 1 << 13, //8192
-  DrawNormals: 1 << 14, //16384
+  DrawConstraints: 1 << 11,
+  //2048
+  DrawConstraintLimits: 1 << 12,
+  //4096
+  FastWireframe: 1 << 13,
+  //8192
+  DrawNormals: 1 << 14,
+  //16384
   MAX_DEBUG_DRAW_MODE: 0xffffffff
 };
+exports.AmmoDebugConstants = AmmoDebugConstants;
 
-const setXYZ = function(array, index, x, y, z) {
+const setXYZ = function (array, index, x, y, z) {
   index *= 3;
   array[index + 0] = x;
   array[index + 1] = y;
   array[index + 2] = z;
 };
-
 /**
  * An implementation of the btIDebugDraw interface in Ammo.js, for debug rendering of Ammo shapes
  * @class AmmoDebugDrawer
@@ -38,23 +48,22 @@ const setXYZ = function(array, index, x, y, z) {
  * @param {Ammo.btCollisionWorld} world
  * @param {object} [options]
  */
-export const AmmoDebugDrawer = function(indexArray, verticesArray, colorsArray, world, options) {
+
+
+const AmmoDebugDrawer = function (indexArray, verticesArray, colorsArray, world, options) {
   this.world = world;
   options = options || {};
-
   this.verticesArray = verticesArray;
   this.colorsArray = colorsArray;
   this.indexArray = indexArray;
-
   this.debugDrawMode = options.debugDrawMode || AmmoDebugConstants.DrawWireframe;
-
   this.index = 0;
+
   if (this.indexArray) {
     Atomics.store(this.indexArray, 0, this.index);
   }
 
   this.enabled = false;
-
   this.debugDrawer = new Ammo.DebugDrawer();
   this.debugDrawer.drawLine = this.drawLine.bind(this);
   this.debugDrawer.drawContactPoint = this.drawContactPoint.bind(this);
@@ -65,23 +74,24 @@ export const AmmoDebugDrawer = function(indexArray, verticesArray, colorsArray,
   this.debugDrawer.enable = this.enable.bind(this);
   this.debugDrawer.disable = this.disable.bind(this);
   this.debugDrawer.update = this.update.bind(this);
-
   this.world.setDebugDrawer(this.debugDrawer);
 };
 
-AmmoDebugDrawer.prototype = function() {
+exports.AmmoDebugDrawer = AmmoDebugDrawer;
+
+AmmoDebugDrawer.prototype = function () {
   return this.debugDrawer;
 };
 
-AmmoDebugDrawer.prototype.enable = function() {
+AmmoDebugDrawer.prototype.enable = function () {
   this.enabled = true;
 };
 
-AmmoDebugDrawer.prototype.disable = function() {
+AmmoDebugDrawer.prototype.disable = function () {
   this.enabled = false;
 };
 
-AmmoDebugDrawer.prototype.update = function() {
+AmmoDebugDrawer.prototype.update = function () {
   if (!this.enabled) {
     return;
   }
@@ -98,38 +108,34 @@ AmmoDebugDrawer.prototype.update = function() {
   }
 };
 
-AmmoDebugDrawer.prototype.drawLine = function(from, to, color) {
+AmmoDebugDrawer.prototype.drawLine = function (from, to, color) {
   const heap = Ammo.HEAPF32;
   const r = heap[(color + 0) / 4];
   const g = heap[(color + 4) / 4];
   const b = heap[(color + 8) / 4];
-
   const fromX = heap[(from + 0) / 4];
   const fromY = heap[(from + 4) / 4];
   const fromZ = heap[(from + 8) / 4];
   setXYZ(this.verticesArray, this.index, fromX, fromY, fromZ);
   setXYZ(this.colorsArray, this.index++, r, g, b);
-
   const toX = heap[(to + 0) / 4];
   const toY = heap[(to + 4) / 4];
   const toZ = heap[(to + 8) / 4];
   setXYZ(this.verticesArray, this.index, toX, toY, toZ);
   setXYZ(this.colorsArray, this.index++, r, g, b);
-};
+}; //TODO: figure out how to make lifeTime work
+
 
-//TODO: figure out how to make lifeTime work
-AmmoDebugDrawer.prototype.drawContactPoint = function(pointOnB, normalOnB, distance, lifeTime, color) {
+AmmoDebugDrawer.prototype.drawContactPoint = function (pointOnB, normalOnB, distance, lifeTime, color) {
   const heap = Ammo.HEAPF32;
   const r = heap[(color + 0) / 4];
   const g = heap[(color + 4) / 4];
   const b = heap[(color + 8) / 4];
-
   const x = heap[(pointOnB + 0) / 4];
   const y = heap[(pointOnB + 4) / 4];
   const z = heap[(pointOnB + 8) / 4];
   setXYZ(this.verticesArray, this.index, x, y, z);
   setXYZ(this.colorsArray, this.index++, r, g, b);
-
   const dx = heap[(normalOnB + 0) / 4] * distance;
   const dy = heap[(normalOnB + 4) / 4] * distance;
   const dz = heap[(normalOnB + 8) / 4] * distance;
@@ -137,7 +143,7 @@ AmmoDebugDrawer.prototype.drawContactPoint = function(pointOnB, normalOnB, dista
   setXYZ(this.colorsArray, this.index++, r, g, b);
 };
 
-AmmoDebugDrawer.prototype.reportErrorWarning = function(warningString) {
+AmmoDebugDrawer.prototype.reportErrorWarning = function (warningString) {
   if (Ammo.hasOwnProperty("UTF8ToString")) {
     console.warn(Ammo.UTF8ToString(warningString));
   } else if (!this.warnedOnce) {
@@ -146,15 +152,15 @@ AmmoDebugDrawer.prototype.reportErrorWarning = function(warningString) {
   }
 };
 
-AmmoDebugDrawer.prototype.draw3dText = function(location, textString) {
+AmmoDebugDrawer.prototype.draw3dText = function (location, textString) {
   //TODO
   console.warn("TODO: draw3dText");
 };
 
-AmmoDebugDrawer.prototype.setDebugMode = function(debugMode) {
+AmmoDebugDrawer.prototype.setDebugMode = function (debugMode) {
   this.debugDrawMode = debugMode;
 };
 
-AmmoDebugDrawer.prototype.getDebugMode = function() {
+AmmoDebugDrawer.prototype.getDebugMode = function () {
   return this.debugDrawMode;
 };
